name: Vprofile IAC
on:
  push:
    branches: [main, stage]
    paths: ["terraform/**"]
  pull_request:
    branches: [main]
    paths: ["terraform/**"]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  AWS_REGION: us-east-1
  EKS_CLUSTER: vprofile-eks

jobs:
  terraform:
    name: Terraform code change
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.3       # your config allows 1.x (>=1.6.3)

      - name: Terraform Init (use backend from code)
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"
        # If you *must* override the bucket, sanitize it to avoid trailing-space bugs:
        # run: |
        #   terraform init -reconfigure \
        #     -backend-config="bucket=$(printf '%s' '${{ secrets.BUCKET_TF_STATE }}' | xargs)" \
        #     -backend-config="region=${{ env.AWS_REGION }}"

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=planfile
        continue-on-error: true

      - name: Terraform plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      # - name: Upload planfile (artifact)
      #   if: always()
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tf-plan
      #     path: terraform/planfile

      - name: Terraform Apply (main only)
        id: apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Kube config file
        id: getkubeconfig
        if: steps.apply.outcome == 'success'
        run: aws eks update-kubeconfig --region "$AWS_REGION" --name "$EKS_CLUSTER"

      - name: Install Ingress controller
        if: steps.apply.outcome == 'success' && steps.getkubeconfig.outcome == 'success'
        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml


      # - name: Update kubeconfig
      #   id: config
      #   if: github.ref == 'refs/heads/main' && steps.apply.outcome == 'success'
      #   run: aws eks update-kubeconfig --name "$EKS_CLUSTER" --region "$AWS_REGION"

###